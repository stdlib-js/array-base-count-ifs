{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport zeroTo from '@stdlib/array-base-zero-to';\n\n\n// FUNCTIONS //\n\n/**\n* Returns an array of indices corresponding to the elements of an input array which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Array<number>} idx - list of indices\n* @param {Function} predicate - predicate function\n* @returns {Array<number>} updated list of indices\n*\n* @example\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import zeroTo from '@stdlib/array-base-zero-to';\n*\n* function predicate( v ) {\n*     return ( v > 0 );\n* }\n*\n* var x = arraylike2object( toAccessorArray( [ -1, 2, 3, -4, 5 ] ) );\n* var idx = zeroTo( 5 );\n*\n* var out = accessors( x, idx, predicate );\n* // returns [ 1, 2, 4 ]\n*/\nfunction accessors( x, idx, predicate ) {\n\tvar buf;\n\tvar get;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tbuf = x.data;\n\tget = x.accessors[ 0 ];\n\n\tk = 0;\n\tfor ( i = 0; i < idx.length; i++ ) {\n\t\tj = idx[ i ];\n\t\tif ( predicate( get( buf, j ), j, buf ) ) {\n\t\t\tidx[ k ] = j;\n\t\t\tk += 1;\n\t\t}\n\t}\n\tidx.length = k;\n\treturn idx;\n}\n\n/**\n* Returns an array of indices corresponding to the elements of an input array which pass a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Array<number>} idx - list of indices\n* @param {Function} predicate - predicate function\n* @returns {Array<number>} updated list of indices\n*\n* @example\n* import zeroTo from '@stdlib/array-base-zero-to';\n*\n* function predicate( v ) {\n*     return ( v > 0 );\n* }\n*\n* var x = [ -1, 2, 3, -4, 5 ];\n* var idx = zeroTo( 5 );\n*\n* var out = indexed( x, idx, predicate );\n* // returns [ 1, 2, 4 ]\n*/\nfunction indexed( x, idx, predicate ) {\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tk = 0;\n\tfor ( i = 0; i < idx.length; i++ ) {\n\t\tj = idx[ i ];\n\t\tif ( predicate( x[ j ], j, x ) ) {\n\t\t\tidx[ k ] = j;\n\t\t\tk += 1;\n\t\t}\n\t}\n\tidx.length = k;\n\treturn idx;\n}\n\n\n// MAIN //\n\n/**\n* Performs element-wise evaluation of one or more input arrays according to provided predicate functions and counts the number of elements for which all predicates respectively return `true`.\n*\n* @param {Collection} x0 - first input array\n* @param {Function} predicate0 - first predicate function\n* @param {Collection} [x1] - second input array\n* @param {Function} [predicate1] - second predicate function\n* @param {Collection} [x2] - third input array\n* @param {Function} [predicate2] - third predicate function\n* @param {...(Collection|Function)} [args] - additional input arrays and predicate functions\n* @returns {NonNegativeInteger} result\n*\n* @example\n* function predicate0( value ) {\n*     return ( value > 0 );\n* }\n*\n* function predicate1( value ) {\n*     return ( value < 3 );\n* }\n*\n* var x0 = [ 0, 1, 0, 1, 2 ];\n* var x1 = [ 2, 3, 1, 2, 5 ];\n*\n* var n = countIfs( x0, predicate0, x1, predicate1 );\n* // returns 1\n*/\nfunction countIfs() {\n\tvar predicates;\n\tvar arrays;\n\tvar len;\n\tvar idx;\n\tvar x;\n\tvar i;\n\n\tarrays = [];\n\tpredicates = [];\n\tfor ( i = 0; i < arguments.length; i += 2 ) {\n\t\tarrays.push( arraylike2object( arguments[ i ] ) );\n\t\tpredicates.push( arguments[ i+1 ] );\n\t}\n\n\tlen = arguments[ 0 ].length;\n\tidx = zeroTo( len );\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tx = arrays[ i ];\n\t\tif ( x.accessorProtocol ) {\n\t\t\tidx = accessors( x, idx, predicates[ i ] );\n\t\t} else {\n\t\t\tidx = indexed( x.data, idx, predicates[ i ] );\n\t\t}\n\t}\n\treturn idx.length;\n}\n\n\n// EXPORTS //\n\nexport default countIfs;\n"],"names":["accessors","x","idx","predicate","buf","get","i","j","k","data","length","indexed","countIfs","predicates","arrays","len","arguments","push","arraylike2object","zeroTo","accessorProtocol"],"mappings":";;mMAoDA,SAASA,EAAWC,EAAGC,EAAKC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAMJ,IAJAJ,EAAMH,EAAEQ,KACRJ,EAAMJ,EAAED,UAAW,GAEnBQ,EAAI,EACEF,EAAI,EAAGA,EAAIJ,EAAIQ,OAAQJ,IAEvBH,EAAWE,EAAKD,EADrBG,EAAIL,EAAKI,IACsBC,EAAGH,KACjCF,EAAKM,GAAMD,EACXC,GAAK,GAIP,OADAN,EAAIQ,OAASF,EACNN,CACR,CAwBA,SAASS,EAASV,EAAGC,EAAKC,GACzB,IAAIG,EACAC,EACAC,EAGJ,IADAA,EAAI,EACEF,EAAI,EAAGA,EAAIJ,EAAIQ,OAAQJ,IAEvBH,EAAWF,EADhBM,EAAIL,EAAKI,IACeC,EAAGN,KAC1BC,EAAKM,GAAMD,EACXC,GAAK,GAIP,OADAN,EAAIQ,OAASF,EACNN,CACR,CAgCA,SAASU,IACR,IAAIC,EACAC,EACAC,EACAb,EACAD,EACAK,EAIJ,IAFAQ,EAAS,GACTD,EAAa,GACPP,EAAI,EAAGA,EAAIU,UAAUN,OAAQJ,GAAK,EACvCQ,EAAOG,KAAMC,EAAkBF,UAAWV,KAC1CO,EAAWI,KAAMD,UAAWV,EAAE,IAK/B,IAFAS,EAAMC,UAAW,GAAIN,OACrBR,EAAMiB,EAAQJ,GACRT,EAAI,EAAGA,EAAIQ,EAAOJ,OAAQJ,IAG9BJ,GAFDD,EAAIa,EAAQR,IACLc,iBACApB,EAAWC,EAAGC,EAAKW,EAAYP,IAE/BK,EAASV,EAAEQ,KAAMP,EAAKW,EAAYP,IAG1C,OAAOJ,EAAIQ,MACZ"}